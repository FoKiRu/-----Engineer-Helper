# ======================= –ò–º–ø–æ—Ä—Ç—ã =======================
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
from pathlib import Path
from collections import Counter
import os
import re
import shutil
import traceback
import json
import psutil
import subprocess
import time
import threading

# ======================= –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ =======================
SCRIPT_VERSION = "v0.5.26"
AUTHOR = "–ê–≤—Ç–æ—Ä: –ö–∏—Ä–∏–ª–ª –†—É—Ç–µ–Ω–∫–æ"
EMAIL = "–≠–ª. –ø–æ—á—Ç–∞: xkiladx@gmail.com"
DESCRIPTION = (
    "EngiHelp ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å INI-—Ñ–∞–π–ª–∞–º–∏ R-Keeper:\n"
    "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UseDBSync/UseSQL, –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –º—É–ª—å—Ç–∏–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ—Ä—Å–∏–π,\n"
    "—É–¥–æ–±–Ω—ã–π –≤—ã–±–æ—Ä –ø—É—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ config.json."
)
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__)) # –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
CONFIG_FILE = "config.json"
FILES = ["RKEEPER.INI", "wincash.ini", "rk7srv.INI", "rk7man.ini"]

# =================== –†–∞–±–æ—Ç–∞ —Å config.json (–º—É–ª—å—Ç–∏-–ø—É—Ç–∏) =============
def load_config_paths():
    if not os.path.exists(CONFIG_FILE):
        return []

    with open(CONFIG_FILE, "r", encoding="utf-8") as f:
        try:
            config = json.load(f)
        except json.JSONDecodeError:
            return []

    return [v for k, v in sorted(config.items()) if k.startswith("ini_dir")]

"""
print("–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
print("–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –∫ config.json:", os.path.abspath("config.json"))
"""

def save_config_path(new_path):
    # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª—ç—à–∏ –Ω–∞ –ø—Ä—è–º—ã–µ
    new_path = new_path.replace("\\", "/")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—É—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
    paths = load_config_paths()
    if new_path in paths:
        paths.remove(new_path)
    paths.insert(0, new_path)
    paths = paths[:3]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
    config = {f"ini_dir{i}": path for i, path in enumerate(paths)}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JSON-—Ñ–∞–π–ª
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(config, f, indent=4, ensure_ascii=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ
    if 'path_entry' in globals():
        path_entry['values'] = paths


# ======================= –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö =======================
ini_paths = load_config_paths()
ini_path = ini_paths[0] if ini_paths else ""
INI_FILE_USESQL=os.path.join(ini_path, "rk7srv.INI")

# ======================= –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∞ =======================
def find_product_root(selected_path):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä INST0.00.0.0000)
    –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ INI-—Ñ–∞–π–ª–æ–≤ –≤ bin/win.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ None.
    """
    original = selected_path

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω bin/win ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è
    if os.path.basename(original).lower() == "win":
        parent = os.path.dirname(original)
        if os.path.basename(parent).lower() == "bin":
            root = os.path.dirname(parent)
        else:
            return None
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω bin ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å
    elif os.path.basename(original).lower() == "bin":
        root = os.path.dirname(original)
    # –ï—Å–ª–∏ —Å—Ä–∞–∑—É INST7... ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ bin/win
    else:
        root = original

    bin_win = os.path.join(root, "bin", "win")
    if all(os.path.isfile(os.path.join(bin_win, f)) for f in FILES):
        return root

    return None

# ======================= –†–∞–±–æ—Ç–∞ —Å INI-—Ñ–∞–π–ª–∞–º–∏ =======================
def get_usedbsync_values():
    values = {}
    for filename in FILES:
        path = os.path.join(ini_path, filename)
        if not os.path.isfile(path):
            continue
        try:
            try:
                with open(path, 'r', encoding='utf-8') as file:
                    lines = file.readlines()
            except UnicodeDecodeError:
                with open(path, 'r', encoding='cp1251') as file:
                    lines = file.readlines()
            for line in lines:
                match = re.match(r'^\s*UseDBSync\s*=\s*(\d+)', line, re.IGNORECASE)
                if match:
                    values[filename] = match.group(1)
                    break
        except Exception:
            continue
    return values

def detect_consensus_value():
    values = get_usedbsync_values()
    if not values:
        return "0"
    counts = Counter(values.values())
    consensus = counts.most_common(1)[0][0]
    for filename, value in values.items():
        if value != consensus:
            full_path = os.path.join(ini_path, filename)
            update_ini_file(full_path, consensus, "UseDBSync")
    return consensus

def get_usesql_value():
    if not os.path.isfile(INI_FILE_USESQL):
        return "0"
    try:
        try:
            with open(INI_FILE_USESQL, 'r', encoding='utf-8') as file:
                lines = file.readlines()
        except UnicodeDecodeError:
            with open(INI_FILE_USESQL, 'r', encoding='cp1251') as file:
                lines = file.readlines()
        for line in lines:
            match = re.match(r'^\s*USESQL\s*=\s*(\d+)', line, re.IGNORECASE)
            if match:
                return match.group(1)
    except Exception:
        pass
    return "0"

def update_ini_file(filepath, value, key):
    try:
        shutil.copy2(filepath, filepath + ".bak")

        filename = os.path.basename(filepath).lower()

        try:
            with open(filepath, 'r', encoding='utf-8') as file:
                lines = file.readlines()
        except UnicodeDecodeError:
            with open(filepath, 'r', encoding='cp1251') as file:
                lines = file.readlines()

        updated = False
        new_lines = []
        key_found = False

        for line in lines:
            if re.match(fr'^\s*{key}\s*=.*', line, re.IGNORECASE):
                new_lines.append(f"{key}={value}\n")
                key_found = True
                updated = True
            else:
                new_lines.append(line)

        # –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
        if not key_found:
            if filename == "rk7man.ini":
                # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
                pass
            else:
                # –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä
                new_lines.append("\n[DBSYNC]\n")
                new_lines.append(f"{key}={value}\n")
                updated = True

        with open(filepath, 'w', encoding='cp1251') as file:
            file.writelines(new_lines)

        return updated

    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] {filepath}: {e}")
        traceback.print_exc()
        return False

def check_files():
    found, missing = [], []
    for filename in FILES:
        full_path = os.path.join(ini_path, filename)
        """
        # üîç DEBUG: –ø–µ—á–∞—Ç–∞–µ–º –ø—É—Ç—å –∏ —Ñ–∞–∫—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {filename} => {full_path}")
        print(f"[DEBUG] –°—É—â–µ—Å—Ç–≤—É–µ—Ç? {'–î–∞' if os.path.isfile(full_path) else '–ù–µ—Ç'}")
        """
        if os.path.isfile(full_path):
            found.append(filename)
        else:
            missing.append(filename)

    return found, missing


def on_check():
    found, missing = check_files()
    filtered_missing = [f for f in missing if f.lower() != "rk7man.ini"]
    if filtered_missing:
        usedbsync_cb.config(state="disabled", fg="gray")
        usesql_cb.config(state="disabled", fg="gray")
        return False
    else:
        usedbsync_cb.config(state="normal", fg="black")
        usesql_cb.config(state="normal", fg="black")
        usedbsync_var.set(int(detect_consensus_value()))
        usesql_var.set(int(get_usesql_value()))
        return True

def toggle_usedbsync():
    value = "1" if usedbsync_var.get() else "0"
    run_update(value)

def toggle_usesql():
    value = "1" if usesql_var.get() else "0"
    run_update_usesql_value(value)

def run_update(value):
    failed = []
    for filename in FILES:
        if filename.lower() == "rk7man.ini":
            continue
        full_path = os.path.join(ini_path, filename)
        success = update_ini_file(full_path, value, "UseDBSync")
        if not success:
            failed.append(filename)
    if failed:
        messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: {', '.join(failed)}")

def run_update_usesql_value(value):
    success = update_ini_file(INI_FILE_USESQL, value, "UseSQL")
    if not success:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å UseSQL –≤ rk7srv.INI")

# === GUI ===
root = tk.Tk()
root.title("EngiHelp")
root.geometry("372x465")

# –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
cursor_x = root.winfo_pointerx()
cursor_y = root.winfo_pointery()
x = max(0, min(screen_width - 372, cursor_x - 230))
y = max(0, min(screen_height - 465, cursor_y - 140))
root.geometry(f"372x465+{x}+{y}")

notebook = ttk.Notebook(root)
notebook.pack(fill="both", expand=True)

settings_tab = tk.Frame(notebook)
notebook.add(settings_tab, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")

# –í—ã–±–æ—Ä –ø—É—Ç–∏
path_frame = tk.Frame(settings_tab)
path_frame.pack(fill="x", padx=10, pady=(10, 0))
tk.Label(path_frame, text="–ü—É—Ç—å –∫ RK7:").pack(anchor="w")
path_var = tk.StringVar()
ini_paths = load_config_paths()
if ini_paths:
    path_var.set(ini_paths[0])

# –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
path_var.trace_add("write", lambda *args: save_config_path(path_var.get()))
path_entry = ttk.Combobox(path_frame, textvariable=path_var, values=ini_paths)
path_entry.pack(side="left", fill="x", expand=True)



def browse_path():
    selected = filedialog.askdirectory()
    if not selected:
        return
    selected = os.path.normpath(selected).replace("\\", "/")

    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ bin/win –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–æ–≤
    bin_win_path = None
    if os.path.basename(selected).lower() == "win":
        parent = os.path.dirname(selected)
        if os.path.basename(parent).lower() == "bin":
            bin_win_path = selected
    elif os.path.basename(selected).lower() == "bin":
        bin_win_path = os.path.join(selected, "win")
    else:
        bin_win_path = os.path.join(selected, "bin", "win").replace("\\", "/")
    #bin_win_path = bin_win_path.replace ("\\", "/")

    # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª—ç—à–∏ –Ω–∞ –ø—Ä—è–º—ã–µ —Å–ª—ç—à–∏
    #selected = selected.replace("\\", "/")
    print(bin_win_path)

    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–≤–∫–ª—é—á–∞—è rk7man.ini)
    required_files = FILES

    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ bin/win/ini
    if os.path.isdir(bin_win_path):
        missing = [f for f in required_files if not os.path.isfile(os.path.join(bin_win_path, f))]
        bin_win_ini = os.path.join(bin_win_path, "ini")
        copied = []
        for f in missing:
            source = os.path.join(bin_win_ini, f)
            target = os.path.join(bin_win_path, f)
            if os.path.isfile(source):
                try:
                    shutil.copy2(source, target)
                    copied.append(f)
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å {f}:\n{e}")
        if copied:
            messagebox.showinfo("–§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã", f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ bin\\win\\ini:\n{', '.join(copied)}")

    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∞
    product_root = find_product_root(selected)
    if not product_root:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å.\n–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞–ø–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è bin/win —Å INI-—Ñ–∞–π–ª–∞–º–∏.")
        return
    
    path_var.set(os.path.join(product_root, "bin", "win").replace("\\", "/"))
    apply_path()

tk.Button(path_frame, text="–û–±–∑–æ—Ä", command=browse_path).pack(side="left", padx=5)

def update_wincash_info():
    win_ini = os.path.join(ini_path, "wincash.ini")
    station = ""
    server = ""

    if not os.path.isfile(win_ini):
        print(f"[!] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {win_ini}")
        return

    try:
        try:
            with open(win_ini, "r", encoding="utf-8") as f:
                lines = f.readlines()
        except UnicodeDecodeError:
            with open(win_ini, "r", encoding="cp1251") as f:
                lines = f.readlines()

        for line in lines:
            line = line.strip()
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º –∫–ª—é—á–µ–π, –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É "="
            if "=" in line:
                key, value = map(str.strip, line.split("=", 1))
                key_lower = key.lower()
                if key_lower == "station":
                    station = value
                elif key_lower == "server":
                    server = value

    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ wincash.ini: {e}")
        return

    if station:
        station_var.set(station)
    if server:
        server_var.set(server)


def apply_path(event=None):
    global ini_path, INI_FILE_USESQL
    ini_path = path_var.get()
    INI_FILE_USESQL = os.path.join(ini_path, "rk7srv.INI")

    if not os.path.isdir(ini_path):
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{ini_path}")
        return

    save_config_path(ini_path)
    on_check()
    update_wincash_info()

path_entry.bind("<<ComboboxSelected>>", apply_path) # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—É—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞

# –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –ø—É—Ç—å"
def open_explorer_to_root():
    product_root = find_product_root(path_var.get())
    if not product_root:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return
    try:
        os.startfile(product_root)
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫:\n{e}")

tk.Button(settings_tab, text="–û—Ç–∫—Ä—ã—Ç—å –ø—É—Ç—å", command=open_explorer_to_root).pack(padx=10, pady=(0, 0), anchor="w")

"""
def is_process_running(process_name):
    for proc in psutil.process_iter(['name']):
        try:
            if proc.info['name'].lower() == process_name.lower():
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return False

def check_program_process():
    if is_process_running("refsrv.exe"):
        messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
    else:
        messagebox.showwarning("–ü—Ä–æ–≤–µ—Ä–∫–∞", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
"""
# ======================= –ó–∞–ø—É—Å–∫ / —Ä–µ—Å—Ç–∞—Ä—Ç Ref, Mid Srv =======================
def run_or_restart_process(exe_name):
    exe_path = os.path.join(ini_path, exe_name)
    if not os.path.isfile(exe_path):
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{exe_path}")
        return

    # –ó–ê–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    for proc in psutil.process_iter(['pid', 'name']):
        if proc.info['name'] and proc.info['name'].lower() == exe_name.lower():
            try:
                proc.terminate()
            except Exception:
                pass

    #–†–µ—Å—Ç–∞—Ä—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º -desktop
    try:
        subprocess.Popen(f'start \"\" \"{exe_path}\" -desktop', shell=True)
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", str(e))

# ======================= –ó–∞–ø—É—Å–∫ rk7man.bat =======================
def run_rk7man():
    for proc in psutil.process_iter(['pid', 'name']):
        if proc.info['name'] and proc.info['name'].lower() == "rk7man.exe":
            try:
                proc.terminate()
            except Exception:
                pass

    time.sleep(1.5)

    bat_path = os.path.join(ini_path, "rk7man.bat")
    if not os.path.isfile(bat_path):
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{bat_path}")
        return
    try:
        os.startfile(bat_path)
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", str(e))

# ======================= –ó–∞–ø—É—Å–∫ wincash.bat =======================
def run_wincash_bat():
    def run_bat():
        bat_path = os.path.join(ini_path, "wincash.bat")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
        if not os.path.isfile(bat_path):
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{bat_path}")
            return
        
        try:
            # –ó–∞–ø—É—Å–∫ .bat —Ñ–∞–π–ª–∞ —Å –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫
            print(f"[DEBUG] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞: {bat_path}")
            result = subprocess.run([bat_path], capture_output=True, text=True, shell=True, cwd=ini_path)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result.returncode != 0:
                # –ï—Å–ª–∏ –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ 0, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ bat —Ñ–∞–π–ª–∞: {result.stderr}")
                messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {bat_path}:\n{result.stderr}")
            else:
                # –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                print(f"[INFO] bat —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:\n{result.stdout}")
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {bat_path}:\n{str(e)}")

    # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_bat, daemon=True).start()

# DOSCASH.EXE –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å

def run_refsrv_and_rk7man():
    run_or_restart_process("refsrv.exe")
    time.sleep(1.5)
    run_rk7man()

# ======================= –ó–∞–ø—É—Å–∫ MidServ + WinCash =======================
def run_midserv_and_wincash():
    run_or_restart_process("midserv.exe")
    time.sleep(1.5)
    run_wincash_bat()

# ======================= –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å =======================
def kill_midserv_process():
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            if proc.info['name'].lower() == "midserv.exe":
                proc.terminate()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                return
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

def kill_rk7man_process():
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            if proc.info['name'].lower() == "rk7man.exe":
                proc.terminate()
                return
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

def kill_refsrv_process():
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            if proc.info['name'].lower() == "refsrv.exe":
                proc.terminate()
                return
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue


def kill_doscash_process():
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            # –ï—Å–ª–∏ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å 'DOSCASH.EXE', –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ
            if proc.info['name'].lower() == "doscash.exe":
                proc.terminate()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                return
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue


# ======================= –ó–∞–ø—É—Å–∫ / –∑–∞–ø—É—Å–∫+–≥—Ä—É–ø–ø—ã =======================
launch_frame = tk.LabelFrame(settings_tab, text="–ó–∞–ø—É—Å–∫")
launch_frame.pack(padx=10, pady=(10, 10), fill="x")

# 3 –∫–æ–ª–æ–Ω–∫–∏ –≤ launch_frame
col1 = tk.Frame(launch_frame)
col2 = tk.Frame(launch_frame)
col3 = tk.Frame(launch_frame)

col1.grid(row=0, column=0, sticky="nw", padx=5, pady=5)
col2.grid(row=0, column=1, sticky="nw", padx=5, pady=5)
col3.grid(row=0, column=2, sticky="nw", padx=5, pady=5)

# –°—Ç—Ä–æ–∫–∞ 0: –¥–≤–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
# –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è Refsrv + RK7man
frame_refsrv_rk7man = tk.Frame(col1)
frame_refsrv_rk7man.pack(anchor="w", pady=(0, 4))

# –ö–Ω–æ–ø–∫–∞ Refsrv + RK7man
tk.Button(frame_refsrv_rk7man, text="Refsrv + RK7man", command=run_refsrv_and_rk7man, width=15)\
    .pack(side="left")

# –ö–Ω–æ–ø–∫–∞ Close –¥–ª—è Refsrv + RK7man
tk.Button(frame_refsrv_rk7man, text="Close", command=lambda: kill_refsrv_process() or kill_rk7man_process(), width=5)\
    .pack(side="left")

# –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è MidServ + WinCash
frame_midserv_wincash = tk.Frame(col2)
frame_midserv_wincash.pack(anchor="w", pady=(0, 4))

# –ö–Ω–æ–ø–∫–∞ MidServ + WinCash
tk.Button(frame_midserv_wincash, text="MidServ + WinCash", command=run_midserv_and_wincash, width=15)\
    .pack(side="left")

# –ö–Ω–æ–ø–∫–∞ Close –¥–ª—è MidServ + WinCash
tk.Button(frame_midserv_wincash, text="Close", command=lambda: kill_midserv_process() or kill_doscash_process(), width=5)\
    .pack(side="left")

# –°—Ç—Ä–æ–∫–∞ 1: –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
# –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è Refsrv
frame_refsrv = tk.Frame(col1)
frame_refsrv.pack(anchor="w", pady=2)

# –ö–Ω–æ–ø–∫–∞ Refsrv
tk.Button(frame_refsrv, text="Refsrv", command=lambda: run_or_restart_process("refsrv.exe"), width=15)\
    .pack(side="left")

# –ö–Ω–æ–ø–∫–∞ Close –¥–ª—è Refsrv
tk.Button(frame_refsrv, text="Close", command=kill_refsrv_process, width=5)\
    .pack(side="left")

# –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è RK7man
frame_rk7man = tk.Frame(col1)
frame_rk7man.pack(anchor="w", pady=2)

# –ö–Ω–æ–ø–∫–∞ RK7man
tk.Button(frame_rk7man, text="RK7man", command=run_rk7man, width=15)\
    .pack(side="left")

# –ö–Ω–æ–ø–∫–∞ Close –¥–ª—è RK7man
tk.Button(frame_rk7man, text="Close", command=kill_rk7man_process, width=5)\
    .pack(side="left")

# –°—Ç—Ä–æ–∫–∞ 2: –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
# –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è MidServ
frame_midserv = tk.Frame(col2)  
frame_midserv.pack(anchor="w", pady=2)  # –†–∞–∑–º–µ—â–∞–µ–º —Ñ—Ä–µ–π–º —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ

# –ö–Ω–æ–ø–∫–∞ MidServ
tk.Button(frame_midserv, text="MidServ", command=lambda: run_or_restart_process("midserv.exe"), width=15)\
    .pack(side="left")  # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ —Å–ª–µ–≤–∞ –≤ —Ñ—Ä–µ–π–º–µ

# –ö–Ω–æ–ø–∫–∞ Close –¥–ª—è MidServ
tk.Button(frame_midserv, text="Close", command=kill_midserv_process, width=5)\
    .pack(side="left")  # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ —Å–ø—Ä–∞–≤–∞ –≤ —Ç–æ–º –∂–µ —Ñ—Ä–µ–π–º–µ

# –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è WinCash
frame_win_cash = tk.Frame(col2)  
frame_win_cash.pack(anchor="w", pady=2)  # –†–∞–∑–º–µ—â–∞–µ–º —Ñ—Ä–µ–π–º —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ

# –ö–Ω–æ–ø–∫–∞ WinCash
tk.Button(frame_win_cash, text="WinCash", command=run_wincash_bat, width=15)\
    .pack(side="left")  # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ —Å–ª–µ–≤–∞ –≤ —Ñ—Ä–µ–π–º–µ

# –ö–Ω–æ–ø–∫–∞ Close –¥–ª—è WinCash
tk.Button(frame_win_cash, text="Close", command=kill_doscash_process, width=5)\
    .pack(side="left")  # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ —Å–ø—Ä–∞–≤–∞ –≤ —Ç–æ–º –∂–µ —Ñ—Ä–µ–π–º–µ


# –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
usesql_var = tk.IntVar(value=int(get_usesql_value()))
usedbsync_var = tk.IntVar(value=int(detect_consensus_value()))

usesql_cb = tk.Checkbutton(settings_tab, variable=usesql_var, text="UseSQL", command=toggle_usesql, anchor="w", width=20, justify='left')
usesql_cb.pack(padx=10, pady=(0, 5), anchor='w')

usedbsync_cb = tk.Checkbutton(settings_tab, variable=usedbsync_var, text="UseDBSync", command=toggle_usedbsync, anchor="w", width=20, justify='left')
usedbsync_cb.pack(padx=10, pady=(0, 5), anchor='w')

# ======================= –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ wincash.ini =======================
station_var = tk.StringVar()
server_var = tk.StringVar()

def load_wincash_params():
    wincash_path = os.path.join(ini_path, "wincash.ini")
    if not os.path.isfile(wincash_path):
        return
    try:
        with open(wincash_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()
    except UnicodeDecodeError:
        with open(wincash_path, 'r', encoding='cp1251') as file:
            lines = file.readlines()

    for line in lines:
        if line.strip().lower().startswith("station="):
            station_var.set(line.strip().split("=", 1)[-1])
        elif line.strip().lower().startswith("server ="):
            server_var.set(line.strip().split("=", 1)[-1])

def save_wincash_params():
    wincash_path = os.path.join(ini_path, "wincash.ini")
    rkeeper_path = os.path.join(ini_path, "RKEEPER.INI")
    server_value = server_var.get()
    
    # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ wincash.ini ---
    if os.path.isfile(wincash_path):
        try:
            with open(wincash_path, 'r', encoding='utf-8') as file:
                lines = file.readlines()
        except UnicodeDecodeError:
            with open(wincash_path, 'r', encoding='cp1251') as file:
                lines = file.readlines()

        new_lines = []
        for line in lines:
            if line.strip().lower().startswith("station="):
                new_lines.append(f"STATION={station_var.get()}\n")
            elif line.strip().lower().startswith("server ="):
                new_lines.append(f"Server ={server_value}\n")
            else:
                new_lines.append(line)

        try:
            with open(wincash_path, 'w', encoding='cp1251') as file:
                file.writelines(new_lines)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å wincash.ini:\n{e}")
    
    # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RKEEPER.INI (Client = ...) ---
    if os.path.isfile(rkeeper_path):
        try:
            with open(rkeeper_path, 'r', encoding='utf-8') as file:
                lines = file.readlines()
        except UnicodeDecodeError:
            with open(rkeeper_path, 'r', encoding='cp1251') as file:
                lines = file.readlines()

        new_rk_lines = []
        client_updated = False
        for line in lines:
            if re.match(r"^\s*Client\s*=", line, re.IGNORECASE):
                new_rk_lines.append(f"Client = {server_value}\n")
                client_updated = True
            else:
                new_rk_lines.append(line)

        if not client_updated:
            new_rk_lines.append(f"\nClient = {server_value}\n")

        try:
            with open(rkeeper_path, 'w', encoding='cp1251') as file:
                file.writelines(new_rk_lines)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å RKEEPER.INI:\n{e}")



# === UI ===
info_frame = tk.LabelFrame(settings_tab, text="Config's")
info_frame.pack(padx=10, pady=(5, 10), fill="x")

tk.Label(info_frame, text="MID:").grid(row=0, column=0, sticky="w")
tk.Entry(info_frame, textvariable=server_var).grid(row=0, column=1, sticky="ew", padx=5)

tk.Label(info_frame, text="CASH:").grid(row=1, column=0, sticky="w")
tk.Entry(info_frame, textvariable=station_var).grid(row=1, column=1, sticky="ew", padx=5)

# –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
station_var.trace_add("write", lambda *args: save_wincash_params())
server_var.trace_add("write", lambda *args: save_wincash_params())

info_frame.grid_columnconfigure(1, weight=1)


# –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_wincash_params()

# –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã"
def create_tooltip(widget, text):
    tooltip = None

    def on_enter(event):
        nonlocal tooltip
        x = widget.winfo_rootx() + widget.winfo_width() + 10
        y = widget.winfo_rooty()
        tooltip = tk.Toplevel(widget)
        tooltip.overrideredirect(True)
        tooltip.geometry(f"+{x}+{y}")
        label = tk.Label(tooltip, text=text, bg="lightyellow", relief="solid", borderwidth=1, justify="left", padx=5, pady=3)
        label.pack()

    def on_leave(event):
        nonlocal tooltip
        if tooltip:
            tooltip.destroy()
            tooltip = None

    widget.bind("<Enter>", on_enter)
    widget.bind("<Leave>", on_leave)

def copy_missing_ini_files():
    bin_win_path = ini_path
    bin_win_ini = os.path.join(bin_win_path, "ini")
    missing = [f for f in FILES if not os.path.isfile(os.path.join(bin_win_path, f))]
    copied = []
    for f in missing:
        source = os.path.join(bin_win_ini, f)
        target = os.path.join(bin_win_path, f)
        if os.path.isfile(source):
            try:
                shutil.copy2(source, target)
                copied.append(f)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å {f}:\n{e}")
    if copied:
        messagebox.showinfo("–§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã", f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ bin\\win\\ini:\n{', '.join(copied)}")
    elif not missing:
        messagebox.showinfo("–í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ", "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ INI-—Ñ–∞–π–ª—ã —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    else:
        messagebox.showwarning("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤", "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–∂–µ –≤ bin\\win\\ini.")

def on_check_with_message():
    found, missing = check_files()

    if missing:  # –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º rk7man.ini
        if messagebox.askyesno("–í–Ω–∏–º–∞–Ω–∏–µ", f"–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(missing)}\n–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –ø–∞–ø–∫–∏ ini?"):
            copy_missing_ini_files()
            on_check()
            update_wincash_info()
    else:
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã.")





# –ö–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã" –∏ "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–ø–∫–∏"
check_folder_frame = tk.Frame(settings_tab)
check_folder_frame.pack(padx=10, pady=10, anchor="w")

check_btn = tk.Button(check_folder_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã", command=on_check_with_message)
check_btn.pack(side="left")
create_tooltip(check_btn, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è INI-—Ñ–∞–π–ª–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")

def show_product_folders():
    product_root = find_product_root(path_var.get())
    if not product_root:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.")
        return
    
    try:
        items = os.listdir(product_root)
        folders = [name for name in items if os.path.isdir(os.path.join(product_root, name))]
        if folders:
            messagebox.showinfo("–ü–∞–ø–∫–∏ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–¥—É–∫—Ç–∞", "\n".join(folders))
        else:
            messagebox.showinfo("–ü–∞–ø–∫–∏ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–¥—É–∫—Ç–∞", "–ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫:\n{e}")

tk.Button(check_folder_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–ø–∫–∏", command=show_product_folders).pack(side="left", padx=5)



# Info tab
info_tab = tk.Frame(notebook)
notebook.add(info_tab, text="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
info_label = tk.Label(info_tab, text=f"{DESCRIPTION}\n{AUTHOR}\n{EMAIL}\n{SCRIPT_VERSION}", justify="left", anchor="nw")
info_label.pack(padx=10, pady=10, anchor="nw", fill="both", expand=True)
info_label.bind('<Configure>', lambda e: info_label.config(wraplength=e.width - 20))

on_check()
root.mainloop()
