# ======================= –ò–º–ø–æ—Ä—Ç—ã =======================
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import os
import re
import shutil
import traceback
import json
import psutil
import subprocess
from pathlib import Path
from collections import Counter
import os
from tkinter import messagebox
import time

# ======================= –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ =======================
SCRIPT_VERSION = "v0.3.17"
AUTHOR = "–ê–≤—Ç–æ—Ä: –ö–∏—Ä–∏–ª–ª –†—É—Ç–µ–Ω–∫–æ"
DESCRIPTION = (
    "EngiHelp ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å INI-—Ñ–∞–π–ª–∞–º–∏ R-Keeper:\n"
    "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UseDBSync/UseSQL, –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –º—É–ª—å—Ç–∏–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ—Ä—Å–∏–π,\n"
    "—É–¥–æ–±–Ω—ã–π –≤—ã–±–æ—Ä –ø—É—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ config.json."
)
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__)) # –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
CONFIG_FILE = "config.json"
FILES = ["RKEEPER.INI", "wincash.ini", "rk7srv.INI"]

# =================== –†–∞–±–æ—Ç–∞ —Å config.json (–º—É–ª—å—Ç–∏-–ø—É—Ç–∏) =============
def load_config_paths():
    if not os.path.exists(CONFIG_FILE):
        return []

    with open(CONFIG_FILE, "r", encoding="utf-8") as f:
        try:
            config = json.load(f)
        except json.JSONDecodeError:
            return []

    return [v for k, v in sorted(config.items()) if k.startswith("ini_dir")]

"""
print("üìÅ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
print("üìÑ –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –∫ config.json:", os.path.abspath("config.json"))
"""

def save_config_path(new_path):
    paths = load_config_paths()
    if new_path in paths:
        paths.remove(new_path)
    paths.insert(0, new_path)
    paths = paths[:3]

    config = {f"ini_dir{i}": path for i, path in enumerate(paths)}
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(config, f, indent=4, ensure_ascii=False)

# ======================= –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö =======================
ini_paths = load_config_paths()
ini_path = ini_paths[0] if ini_paths else ""
INI_FILE_USESQL=os.path.join(ini_path, "rk7srv.INI")

# ======================= –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∞ =======================
def find_product_root(selected_path):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä INST0.00.0.0000)
    –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ INI-—Ñ–∞–π–ª–æ–≤ –≤ bin/win.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ None.
    """
    original = selected_path

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω bin/win ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è
    if os.path.basename(original).lower() == "win":
        parent = os.path.dirname(original)
        if os.path.basename(parent).lower() == "bin":
            root = os.path.dirname(parent)
        else:
            return None
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω bin ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å
    elif os.path.basename(original).lower() == "bin":
        root = os.path.dirname(original)
    # –ï—Å–ª–∏ —Å—Ä–∞–∑—É INST7... ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ bin/win
    else:
        root = original

    bin_win = os.path.join(root, "bin", "win")
    if all(os.path.isfile(os.path.join(bin_win, f)) for f in FILES):
        return root

    return None

# ======================= –†–∞–±–æ—Ç–∞ —Å INI-—Ñ–∞–π–ª–∞–º–∏ =======================
def get_usedbsync_values():
    values = {}
    for filename in FILES:
        path = os.path.join(ini_path, filename)
        if not os.path.isfile(path):
            continue
        try:
            try:
                with open(path, 'r', encoding='utf-8') as file:
                    lines = file.readlines()
            except UnicodeDecodeError:
                with open(path, 'r', encoding='cp1251') as file:
                    lines = file.readlines()
            for line in lines:
                match = re.match(r'^\s*UseDBSync\s*=\s*(\d+)', line, re.IGNORECASE)
                if match:
                    values[filename] = match.group(1)
                    break
        except Exception:
            continue
    return values

def detect_consensus_value():
    values = get_usedbsync_values()
    if not values:
        return "0"
    counts = Counter(values.values())
    consensus = counts.most_common(1)[0][0]
    for filename, value in values.items():
        if value != consensus:
            full_path = os.path.join(ini_path, filename)
            update_ini_file(full_path, consensus, "UseDBSync")
    return consensus

def get_usesql_value():
    if not os.path.isfile(INI_FILE_USESQL):
        return "0"
    try:
        try:
            with open(INI_FILE_USESQL, 'r', encoding='utf-8') as file:
                lines = file.readlines()
        except UnicodeDecodeError:
            with open(INI_FILE_USESQL, 'r', encoding='cp1251') as file:
                lines = file.readlines()
        for line in lines:
            match = re.match(r'^\s*USESQL\s*=\s*(\d+)', line, re.IGNORECASE)
            if match:
                return match.group(1)
    except Exception:
        pass
    return "0"

def update_ini_file(filepath, value, key):
    try:
        shutil.copy2(filepath, filepath + ".bak")
        try:
            with open(filepath, 'r', encoding='utf-8') as file:
                lines = file.readlines()
        except UnicodeDecodeError:
            with open(filepath, 'r', encoding='cp1251') as file:
                lines = file.readlines()
        updated = False
        with open(filepath, 'w', encoding='cp1251') as file:
            for line in lines:
                if re.match(fr'^\s*{key}\s*=.*', line, re.IGNORECASE):
                    file.write(f"{key}={value}\n")
                    updated = True
                else:
                    file.write(line)
            if not updated:
                file.write(f"\n{key}={value}\n")
        return True
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] {filepath}: {e}")
        traceback.print_exc()
        return False

def check_files():
    found, missing = [], []
    for filename in FILES:
        full_path = os.path.join(ini_path, filename)
        if os.path.isfile(full_path):
            found.append(filename)
        else:
            missing.append(filename)
    return found, missing

def on_check():
    found, missing = check_files()
    if missing:
        usedbsync_cb.config(state="disabled", fg="gray")
        usesql_cb.config(state="disabled", fg="gray")
        return False
    else:
        usedbsync_cb.config(state="normal", fg="black")
        usesql_cb.config(state="normal", fg="black")
        usedbsync_var.set(int(detect_consensus_value()))
        usesql_var.set(int(get_usesql_value()))
        return True


def toggle_usedbsync():
    value = "1" if usedbsync_var.get() else "0"
    run_update(value)

def toggle_usesql():
    value = "1" if usesql_var.get() else "0"
    run_update_usesql_value(value)

def run_update(value):
    failed = []
    for filename in FILES:
        full_path = os.path.join(ini_path, filename)
        success = update_ini_file(full_path, value, "UseDBSync")
        if not success:
            failed.append(filename)
    if failed:
        messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: {', '.join(failed)}")

def run_update_usesql_value(value):
    success = update_ini_file(INI_FILE_USESQL, value, "UseSQL")
    if not success:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å UseSQL –≤ rk7srv.INI")

# === GUI ===
root = tk.Tk()
root.title("EngiHelp")
root.geometry("460x300")

# –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
cursor_x = root.winfo_pointerx()
cursor_y = root.winfo_pointery()
x = max(0, min(screen_width - 460, cursor_x - 230))
y = max(0, min(screen_height - 300, cursor_y - 140))
root.geometry(f"460x300+{x}+{y}")

notebook = ttk.Notebook(root)
notebook.pack(fill="both", expand=True)

settings_tab = tk.Frame(notebook)
notebook.add(settings_tab, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")

# –í—ã–±–æ—Ä –ø—É—Ç–∏
path_frame = tk.Frame(settings_tab)
path_frame.pack(fill="x", padx=10, pady=(10, 0))
tk.Label(path_frame, text="–ü—É—Ç—å –∫ INI-—Ñ–∞–π–ª–∞–º:").pack(anchor="w")
path_var = tk.StringVar()
ini_paths = load_config_paths()
if ini_paths:
    path_var.set(ini_paths[0])
path_entry = ttk.Combobox(path_frame, textvariable=path_var, values=ini_paths)
path_entry.pack(side="left", fill="x", expand=True)

def browse_path():
    selected = filedialog.askdirectory()
    if selected:
        product_root = find_product_root(selected)
        if product_root:
            bin_win_path = os.path.join(product_root, "bin", "win")
            path_var.set(bin_win_path)
            apply_path()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å.\n–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞–ø–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è bin/win —Å INI-—Ñ–∞–π–ª–∞–º–∏.")

tk.Button(path_frame, text="–û–±–∑–æ—Ä", command=browse_path).pack(side="left", padx=5)

def apply_path(event=None):
    global ini_path, INI_FILE_USESQL
    ini_path = path_var.get()
    INI_FILE_USESQL = os.path.join(ini_path, "rk7srv.INI")
    save_config_path(ini_path)
    on_check()

path_entry.bind("<<ComboboxSelected>>", apply_path) # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—É—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
#tk.Button(settings_tab, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Ç—å", command=apply_path).pack(padx=10, pady=(5, 10), anchor="w")

def show_product_folders():
    product_root = find_product_root(path_var.get())
    if not product_root:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞.")
        return
    
    try:
        items= os.listdir(product_root)
        folders = [name for name in items if os.path.isdir(os.path.join(product_root, name))]
        if folders:
            messagebox.showinfo("–ü–∞–ø–∫–∏ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–¥—É–∫—Ç–∞", "\n".join(folders))
        else:
            messagebox.showinfo("–ü–∞–ø–∫–∏ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–¥—É–∫—Ç–∞", "–ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫:\n{e}")

tk.Button(settings_tab, text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–ø–∫–∏", command=show_product_folders).pack(padx=10, pady=(0, 10), anchor="w")

"""
def is_process_running(process_name):
    for proc in psutil.process_iter(['name']):
        try:
            if proc.info['name'].lower() == process_name.lower():
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return False

def check_program_process():
    if is_process_running("refsrv.exe"):
        messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞", "‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
    else:
        messagebox.showwarning("–ü—Ä–æ–≤–µ—Ä–∫–∞", "‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
"""
# ======================= –ó–∞–ø—É—Å–∫ / —Ä–µ—Å—Ç–∞—Ä—Ç Ref, Mid Srv =======================
def run_or_restart_process(exe_name):
    exe_path = os.path.join(ini_path, exe_name)
    if not os.path.isfile(exe_path):
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{exe_path}")
        return

    # –ó–ê–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    for proc in psutil.process_iter(['pid', 'name']):
        if proc.info['name'] and proc.info['name'].lower() == exe_name.lower():
            try:
                proc.terminate()
            except Exception:
                pass

    #–†–µ—Å—Ç–∞—Ä—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º -desktop
    try:
        subprocess.Popen(f'start \"\" \"{exe_path}\" -desktop', shell=True)
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", str(e))

# ======================= –ó–∞–ø—É—Å–∫ rk7man.bat =======================
def run_rk7man():
    for proc in psutil.process_iter(['pid', 'name']):
        if proc.info['name'] and proc.info['name'].lower() == "rk7man.exe":
            try:
                proc.terminate()
            except Exception:
                pass

    time.sleep(1.5)

    bat_path = os.path.join(ini_path, "rk7man.bat")
    if not os.path.isfile(bat_path):
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{bat_path}")
        return
    try:
        os.startfile(bat_path)
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", str(e))

# ======================= –ó–∞–ø—É—Å–∫ wincash.bat =======================
def run_wincash_bat():
    bat_path = os.path.join(ini_path, "wincash.bat")
    if not os.path.isfile(bat_path):
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{bat_path}")
        return
    try:
        os.startfile(bat_path)
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", str(e))


# ======================= –ë–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ =======================
launch_frame = tk.LabelFrame(settings_tab, text="–ó–∞–ø—É—Å–∫")
launch_frame.pack(padx=10, pady=(10, 10), anchor="w", fill="x")

proc_frame_top = tk.Frame(launch_frame)
proc_frame_top.pack(anchor="w", padx=5, pady=(5, 0))

tk.Button(proc_frame_top, text="Refsrv", command=lambda: run_or_restart_process("refsrv.exe")).pack(side="left", padx=(0, 5))
tk.Button(proc_frame_top, text="RK7man", command=run_rk7man).pack(side="left")

proc_frame_bottom = tk.Frame(launch_frame)
proc_frame_bottom.pack(anchor="w", padx=5, pady=(5, 5))

tk.Button(proc_frame_bottom, text="MidServ.exe", command=lambda: run_or_restart_process("midserv.exe")).pack(side="left", padx=(0, 5))
tk.Button(proc_frame_bottom, text="WinCash (.bat)", command=run_wincash_bat).pack(side="left")




# –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
usesql_var = tk.IntVar(value=int(get_usesql_value()))
usedbsync_var = tk.IntVar(value=int(detect_consensus_value()))

usesql_cb = tk.Checkbutton(settings_tab, variable=usesql_var, text="UseSQL", command=toggle_usesql, anchor="w", width=20, justify='left')
usesql_cb.pack(padx=10, pady=(0, 5), anchor='w')

usedbsync_cb = tk.Checkbutton(settings_tab, variable=usedbsync_var, text="UseDBSync", command=toggle_usedbsync, anchor="w", width=20, justify='left')
usedbsync_cb.pack(padx=10, pady=(0, 5), anchor='w')

# –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã"
def create_tooltip(widget, text):
    tooltip = None

    def on_enter(event):
        nonlocal tooltip
        x = widget.winfo_rootx() + widget.winfo_width() + 10
        y = widget.winfo_rooty()
        tooltip = tk.Toplevel(widget)
        tooltip.overrideredirect(True)
        tooltip.geometry(f"+{x}+{y}")
        label = tk.Label(tooltip, text=text, bg="lightyellow", relief="solid", borderwidth=1, justify="left", padx=5, pady=3)
        label.pack()

    def on_leave(event):
        nonlocal tooltip
        if tooltip:
            tooltip.destroy()
            tooltip = None

    widget.bind("<Enter>", on_enter)
    widget.bind("<Leave>", on_leave)

def on_check_with_message():
    result = on_check()
    if result:
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", f"–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(check_files()[1])}")


check_btn = tk.Button(settings_tab, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã", command=on_check_with_message)
check_btn.pack(padx=10, pady=10, anchor="w")
create_tooltip(check_btn, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è INI-—Ñ–∞–π–ª–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")


# Info tab
info_tab = tk.Frame(notebook)
notebook.add(info_tab, text="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
info_label = tk.Label(info_tab, text=f"{DESCRIPTION}\n{AUTHOR}\n{SCRIPT_VERSION}", justify="left", anchor="nw")
info_label.pack(padx=10, pady=10, anchor="nw", fill="both", expand=True)
info_label.bind('<Configure>', lambda e: info_label.config(wraplength=e.width - 20))

on_check()
root.mainloop()
